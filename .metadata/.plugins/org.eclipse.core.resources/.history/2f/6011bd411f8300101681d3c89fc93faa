package JDBC.controller;

import java.io.IOException;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import JDBC.model.Users;
import JDBC.service.UserService;

@SuppressWarnings("serial")
@WebServlet(urlPatterns = "/login")
public class LoginController extends HttpServlet {

	public static final String SESSION_ACCOUNT = "account";
	public static final String COOKIE_REMEMBER = "username";

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		HttpSession session = req.getSession(false);

		// Nếu đã login thì chuyển sang waiting
		if (session != null && session.getAttribute(SESSION_ACCOUNT) != null) {
			resp.sendRedirect(req.getContextPath() + "/waiting");
			return;
		}

		// Check cookie "Remember me"
		Cookie[] cookies = req.getCookies();
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if (COOKIE_REMEMBER.equals(cookie.getName())) {
					session = req.getSession(true);
					// Lưu thông tin username từ cookie vào session
					session.setAttribute(SESSION_ACCOUNT, cookie.getValue());
					resp.sendRedirect(req.getContextPath() + "/waiting");
					return;
				}
			}
		}

		// Chưa login, forward tới login.jsp
		req.getRequestDispatcher("views/login.jsp").forward(req, resp);
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

		resp.setContentType("text/html");
		resp.setCharacterEncoding("UTF-8");
		req.setCharacterEncoding("UTF-8");

		String username = req.getParameter("username");
		String password = req.getParameter("password");
		String remember = req.getParameter("remember");

		boolean isRememberMe = "on".equals(remember);
		String alertMsg = "";

		// Validate input (trim để tránh khoảng trắng)
		if (username == null || username.trim().isEmpty() || password == null || password.trim().isEmpty()) {
			alertMsg = "Tài khoản hoặc mật khẩu không được rỗng";
			req.setAttribute("alert", alertMsg);
			req.getRequestDispatcher("/views/login.jsp").forward(req, resp);
			return;
		}

		// Gọi Service login
		UserService service = new UserServiceImpl();
		Users user = service.login(username.trim(), password.trim());

		if (user != null) {
			HttpSession session = req.getSession(true);
			session.setAttribute(SESSION_ACCOUNT, user);

			if (isRememberMe) {
				saveRememberMe(resp, username.trim());
			}

			resp.sendRedirect(req.getContextPath() + "/waiting");
		} else {
			alertMsg = "Tài khoản hoặc mật khẩu không đúng";
			req.setAttribute("alert", alertMsg);
			req.getRequestDispatcher("/views/login.jsp").forward(req, resp);
		}
	}

	private void saveRememberMe(HttpServletResponse response, String username) {
		Cookie cookie = new Cookie(COOKIE_REMEMBER, username);
		cookie.setMaxAge(30 * 60); // 30 phút
		cookie.setPath("/"); // cookie có hiệu lực toàn app
		response.addCookie(cookie);
	}
}
